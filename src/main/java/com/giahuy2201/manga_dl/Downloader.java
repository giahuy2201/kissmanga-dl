package com.giahuy2201.manga_dl;import me.tongfei.progressbar.ProgressBar;import org.apache.commons.io.FileUtils;import java.io.File;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;/** * Downloader class to work with Selenium container */public class Downloader {	private int resumingIndex;	private final List<String> remainingPNGs;	private final List<Integer> remainingChaptersSizes;	public Downloader() {		readDownloadedChapterIndex();		List<List<String>> chaptersPNGs = MangaDL.extractor.getChaptersPNGs();		// collect remaing chaptes' sizes		this.remainingPNGs = new ArrayList<>();		this.remainingChaptersSizes = new ArrayList<>();		for (int i = resumingIndex; i < chaptersPNGs.size(); i++) {			remainingPNGs.addAll(chaptersPNGs.get(i));			remainingChaptersSizes.add(chaptersPNGs.get(i).size());		}		if (resumingIndex != 0) {			System.out.println("Resuming at " + MangaDL.extractor.getChaptersNames().get(resumingIndex));			MangaDL.logger.info("Resuming at " + MangaDL.extractor.getChaptersNames().get(resumingIndex));		}	}	/**	 * Download	 *	 * @throws IOException	 */	public void download() throws IOException {		Iterable<String> remainingPNGs = this.remainingPNGs;		if (!MangaDL.verbose) {			remainingPNGs = ProgressBar.wrap(this.remainingPNGs, "Downloading");		}		int chapterIndex = resumingIndex, pngIndex = 0;		for (String chapterPNG : remainingPNGs) {			MangaDL.logger.info("Retrieving: " + chapterPNG);			String frameFileName = formatIndex(chapterIndex) + "-" + formatIndex(pngIndex) + ".png";			File outputFile = new File(MangaDL.extractor.getMangaDirectory(), frameFileName);			// Try 3 times if fails			long attempts = 0;			boolean failed = true;			do {				try {					FileUtils.copyURLToFile(new URL(chapterPNG), outputFile);					failed = false;					MangaDL.logger.fine("Retrieved successfully!");					break;				} catch (IOException e) {					MangaDL.logger.warning("Failed to retrieve: " + chapterPNG);					MangaDL.logger.info("Trying a " + ++attempts + "th time ...");				}			} while (attempts < 3);			if (failed) {				MangaDL.logger.severe("Cannot retrieve " + chapterPNG);				throw new IOException("Cannot retrieve " + chapterPNG);			}			// Recalculate chapterIndex			if (pngIndex + 1 - remainingChaptersSizes.get(chapterIndex - resumingIndex) > 0) {				pngIndex = -1; // compensate for the increment				chapterIndex++;			}			pngIndex++;		}		MangaDL.logger.finest("DOWNLOADING finished\n");	}	/**	 * Find the latest chapter number to resume	 */	private void readDownloadedChapterIndex() {		File mangaDirectory = MangaDL.extractor.getMangaDirectory();		MangaDL.logger.info("Scanning " + mangaDirectory + " ...");		File[] mangaFrames = mangaDirectory.listFiles(				pathname -> pathname.getName().matches("\\d{3}-\\d{3}.png$")		);		if (mangaFrames == null || mangaFrames.length == 0) {			this.resumingIndex = 0;		} else {			File latestFile = Collections.max(Arrays.asList(mangaFrames));			this.resumingIndex = Integer.parseInt(latestFile.getName().substring(0, 3));			MangaDL.logger.fine("Found latest frame " + latestFile);		}	}	/**	 * Format index number into ### for better EPUB bundling. Eg. 1 -> 001	 *	 * @param count decimal number	 */	private String formatIndex(int count) {		final int LENGTH = 3;		String index = count + "";		int countLength = index.length();		for (int i = 0; i < LENGTH - countLength; i++) {			index = "0" + index;		}		return index;	}}