package com.giahuy2201.manga_dl;import picocli.CommandLine;import picocli.CommandLine.Command;import picocli.CommandLine.Option;import picocli.CommandLine.Parameters;import picocli.CommandLine.ScopeType;import java.io.File;import java.io.IOException;import java.util.concurrent.Callable;import java.util.logging.*;/** * Main class controlling CLI and branching */@Command(name = "download", description = "Only download image files (.png).")class MangaDownLoad implements Callable<Integer> {	@Parameters(paramLabel = "URL", description = "Link to manga.")	private String mangaUrl;	@Override	public Integer call() throws Exception {		MangaDL.setVerbose(MangaDL.verbose);		MangaDL.setLogFile(MangaDL.log);		MangaDL.extractor = new Extractor(mangaUrl, new Kissmanga());		MangaDL.download();		MangaDL.saveLog();		System.out.println("done.");		return 0;	}}@Command(name = "bundle", description = "Pack image files (.png) into an EPUB file")class MangaPack implements Callable<Integer> {	@Parameters(paramLabel = "path", description = "Manga directory.")	private String mangaDirectory;	@Override	public Integer call() throws Exception {		MangaDL.setVerbose(MangaDL.verbose);		MangaDL.setLogFile(MangaDL.log);		MangaDL.extractor = new Extractor(new File(mangaDirectory));		MangaDL.pack();		MangaDL.saveLog();		System.out.println("done.");		return 0;	}}@Command(name = "manga-dl", subcommands = {MangaDownLoad.class, MangaPack.class})public class MangaDL implements Callable<Integer> {	@Parameters(paramLabel = "URL", description = "Link to manga.", arity = "0..1")	private String mangaUrl;	@Option(names = {"--threads", "-t"}, description = "Number of threads for downloading.", hidden = true, scope = ScopeType.INHERIT)	protected static int nThreads = 10;	@Option(names = {"--log", "-l"}, description = "Save log file.", scope = ScopeType.INHERIT)	protected static boolean log = false;	@Option(names = {"--verbose", "-v"}, description = "Enable console log.", scope = ScopeType.INHERIT)	protected static boolean verbose = false;	@Option(names = {"--help", "-h"}, description = "Show this help message.", usageHelp = true)	private boolean help = false;	static CommandLine cli;	static Logger logger;	static Extractor extractor;	public static void main(String... args) {		MangaDL.cli = new CommandLine(new MangaDL());		int exitCode = 1;		try {			exitCode = MangaDL.cli.execute(args);		} catch (Exception e) {			e.printStackTrace();		}		System.exit(exitCode);	}	MangaDL() {		MangaDL.logger = Logger.getLogger(getClass().getName());		logger.setLevel(Level.ALL);		// disable console output by default		MangaDL.logger.setUseParentHandlers(false);	}	public Integer call() throws Exception {		MangaDL.setVerbose(verbose);		MangaDL.setLogFile(log);		MangaDL.extractor = new Extractor(mangaUrl, new Kissmanga());		MangaDL.download();		MangaDL.pack();		MangaDL.saveLog();		System.out.println("done.");		return 0;	}	/**	 * Just download	 *	 * @throws IOException	 */	protected static void download() throws Exception {		new Downloader().download();	}	/**	 * Pack a manga	 *	 * @throws Exception	 */	protected static void pack() throws Exception {		new EPUBBundler().create();	}	/**	 * Create a log file	 */	protected static void setLogFile(boolean logOn) throws IOException {		if (logOn) {			FileHandler logFileHandler = new FileHandler("log.txt");			logFileHandler.setFormatter(new SimpleFormatter());			logger.addHandler(logFileHandler);		}	}	protected static void saveLog() {		File log = new File("./", "log.txt");		if (log.exists()) {			log.renameTo(new File(extractor.getTitle() + ".txt"));		}	}	protected static void setVerbose(boolean verboseOn) {		if (verboseOn) {			Handler console = new ConsoleHandler();			console.setLevel(Level.ALL);			logger.addHandler(console);		}	}}