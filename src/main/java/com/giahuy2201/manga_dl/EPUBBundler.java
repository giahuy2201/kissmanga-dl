package com.giahuy2201.manga_dl;import me.tongfei.progressbar.ProgressBar;import nl.siegmann.epublib.domain.Author;import nl.siegmann.epublib.domain.Book;import nl.siegmann.epublib.domain.Resource;import nl.siegmann.epublib.epub.EpubWriter;import org.apache.commons.io.IOUtils;import java.io.*;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * Class to create EPUB file from PNGs */public class EPUBBundler {	private class ProgressBarRunnable implements Runnable {		private boolean finished = false;		public void run() {			long max = (long) fileSize(MangaDL.extractor.getMangaDirectory());			long current = 0;			ProgressBar progressBar = new ProgressBar("Bundling", max);			while (current < max) {				current = (long) fileSize(new File(MangaDL.extractor.getTitle() + ".epub"));//				try {//					Thread.currentThread().sleep(50);//				} catch (Exception e) {//					e.printStackTrace();//				}				if (finished) {					current = max;				}				progressBar.stepTo(current);			}			progressBar.close();		}		private double fileSize(File dir) {			if (!dir.exists()) {				return 0;			}			if (dir.isFile()) {				return dir.length() / Math.pow(1024, 2);			}			double folderSize = 0;			for (File file : dir.listFiles()) {				folderSize += fileSize(file);			}			return folderSize;		}	}	// manga folder contains file manga.xml and images files	private final ClassLoader resourceLoader;	private final Book book;	public EPUBBundler() {		this.resourceLoader = getClass().getClassLoader();		this.book = new Book();	}	/**	 * Create Epub book file from images and metadata in manga.xml file in	 * mangaDirectory	 *	 * @throws IOException	 */	public void create() throws Exception {		File mangaDirectory = MangaDL.extractor.getMangaDirectory();		if (new File(mangaDirectory, "cover.png").exists()) {			MangaDL.logger.fine("Found cover image ");			MangaDL.extractor.setCover("cover");		}		// Set the metadata		String title = MangaDL.extractor.getTitle();		String cover = MangaDL.extractor.getCover() + ".png";		MangaDL.logger.info("Set manga title");		book.getMetadata().addTitle(title);		MangaDL.logger.info("Set manga authors");		List<Author> authors = new ArrayList<>();		authors.add(new Author(MangaDL.extractor.getAuthors()));		book.getMetadata().setAuthors(authors);		// Set cover image		MangaDL.logger.info("Add cover");		book.setCoverImage(new Resource(new FileInputStream(new File(mangaDirectory, cover)), "cover.png"));		// Add css file		MangaDL.logger.info("Add manga stylesheet");		book.addResource(new Resource(resourceLoader.getResourceAsStream("stylesheet.css"), "stylesheet.css"));		// Add resources		MangaDL.logger.info("Copying resources ...");		List<List<File>> chapterList = collectPNGs();		for (int i = 0; i < chapterList.size(); i++) {			List<File> chapter = chapterList.get(i);			for (File image : chapter) {				book.addResource(new Resource(new FileInputStream(image), "images/" + image.getName()));			}			String chapterName = MangaDL.extractor.getChaptersNames().get(i);			MangaDL.logger.info("Adding chapter \"" + chapterName + "\"");			InputStream chapterHTML = toInputStream(buildChapter(chapterList.get(i)));			book.addSection(chapterName, new Resource(chapterHTML, chapterName + ".html"));		}		MangaDL.logger.info("Writing to file " + title + ".epub");		EpubWriter epubWriter = new EpubWriter();		if (MangaDL.verbose) {			epubWriter.write(book, new FileOutputStream(MangaDL.extractor.getTitle() + ".epub"));		} else {			// A thread for progress bar			ProgressBarRunnable progressBar = new ProgressBarRunnable();			Thread progressThread = new Thread(progressBar);			progressThread.start();			epubWriter.write(book, new FileOutputStream(MangaDL.extractor.getTitle() + ".epub"));			progressBar.finished = true;			progressThread.join();		}		MangaDL.logger.finest("BUNDLING finished\n");	}	/**	 * Construct a html file with chapter images	 *	 * @param PNGs	 * @return	 */	private String buildChapter(List<File> PNGs) throws IOException {		StringBuilder content = new StringBuilder();		for (File image : PNGs) {			content.append(String.format("<p class=\"image-wrapper\"><img src=\"images/%s\" class=\"image\"/></p>\n",					image.getName()));		}		String baseHTML = IOUtils.toString(resourceLoader.getResourceAsStream("chapter.html"), "UTF-8");		baseHTML = baseHTML.replace("$CONTENT", content.toString());		return baseHTML;	}	/**	 * Sort images into a list of chapter	 *	 * @return	 */	private List<List<File>> collectPNGs() throws Exception {		File[] files = MangaDL.extractor.getMangaDirectory().listFiles();		MangaDL.logger.info("Collecting frames");		List<List<File>> PNGs = new ArrayList<>();		for (File file : files) {			// Skip cover PNG and non PNGs			if (!file.getName().endsWith(".png") || file.getName().equals(MangaDL.extractor.getCover() + ".png")) {				continue;			}			int groupIndex = Integer.parseInt(file.getName().substring(0, 3));			// Fill in new chapter lists			for (int i = PNGs.size(); i <= groupIndex; i++) {				PNGs.add(new ArrayList<>());			}			PNGs.get(groupIndex).add(file);		}		for (List<File> list : PNGs) {			Collections.sort(list);		}		return PNGs;	}	private InputStream toInputStream(String string) {		return new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8));	}}